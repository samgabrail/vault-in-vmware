#!/bin/bash

# Part 1: Static MySQL Secret Rotation Demo
# This script orchestrates the complete static MySQL secret rotation demonstration

set -e

echo "=== Part 1: Static MySQL Secret Rotation Demo ==="
echo

# Check prerequisites
if ! command -v vault &> /dev/null; then
    echo "‚ùå Vault CLI not found. Please install Vault."
    exit 1
fi

if ! vault status >/dev/null 2>&1; then
    echo "‚ùå Vault is not running or not accessible."
    echo "   Please start Vault dev server: vault server -dev"
    exit 1
fi

if ! command -v jq &> /dev/null; then
    echo "‚ùå jq not found. Please install jq for JSON processing."
    exit 1
fi

if ! docker ps -q -f name=vault-mysql-demo >/dev/null 2>&1; then
    echo "‚ùå MySQL container not running. Starting it now..."
    ./mysql-setup.sh
fi

echo "‚úÖ Prerequisites satisfied"
echo

# Show the static rotation flow
echo "üìã Static Secret Rotation Flow (MySQL Database):"
echo "   1. üîë Vault generates new password (using password policies)"
echo "   2. üì• User retrieves password from Vault"
echo "   3. üóÑÔ∏è  User updates MySQL database with new password"
echo "   4. üìù User updates application configuration"
echo "   5. üè¶ User stores credential metadata in Vault"
echo "   6. üöÄ Applications retrieve updated credential from Vault"
echo

# Show current state
echo "üîç Current State Before Rotation:"
echo "================================="
echo
echo "üìä Current MySQL service account:"
echo "   Username: app-service-user"
echo "   Password: initial-static-password (static, never rotated)"
echo
echo "üîó Testing current connection:"
if docker exec vault-mysql-demo mysql -u app-service-user -pinitial-static-password demo -e "
SELECT 
    'Current connection works' as Status,
    USER() as Connected_As,
    COUNT(*) as Total_Records
FROM users;" 2>/dev/null; then
    echo "   ‚úÖ Current static password works"
else
    echo "   ‚ùå Current connection failed"
fi
echo

# Show Vault password policy
echo "üîí Password Policy for MySQL Rotation:"
echo "======================================"
echo "   Policy Name: mysql-static-policy"
echo "   Length: 24 characters"
echo "   Character Sets: letters, numbers, @#% (database-safe)"
echo
echo "üé≤ Sample password generation:"
SAMPLE_PASSWORD=$(vault read -field=password sys/policies/password/mysql-static-policy/generate)
echo "   Generated: ${SAMPLE_PASSWORD:0:6}****${SAMPLE_PASSWORD: -6}"
echo "   Length: ${#SAMPLE_PASSWORD} characters"
echo

# Show current Vault state
echo "üìö Current Vault State:"
echo "======================"
echo "üîç Stored credential:"
vault kv get static-secrets/mysql/service-accounts/app-service-user | grep -E "(username|password|rotation_status|created)"
echo

# Wait for user to continue
read -p "Press Enter to perform password rotation..."
echo

# Perform the rotation
echo "üîÑ Performing Static MySQL Password Rotation:"
echo "=============================================="
./rotate-mysql-password.sh
echo

# Show the difference - what changed
echo "üîç What Changed After Rotation:"
echo "==============================="
echo
echo "üìä MySQL Database:"
echo "   ‚Ä¢ Service account password updated"
echo "   ‚Ä¢ Old password no longer valid"
echo "   ‚Ä¢ New password generated by Vault policy"
echo
echo "üìù Application Configuration:"
echo "   ‚Ä¢ Config file updated with new password"
echo "   ‚Ä¢ Rotation timestamp recorded"
echo "   ‚Ä¢ Backup created for rollback"
echo
echo "üè¶ Vault Storage:"
echo "   ‚Ä¢ New credential version stored"
echo "   ‚Ä¢ Metadata includes rotation details"
echo "   ‚Ä¢ Version history maintained"
echo

# Test the final state
echo "üß™ Final Verification:"
echo "====================="
echo
echo "üîó Testing with credentials from Vault:"
VAULT_CREDS=$(vault kv get -format=json static-secrets/mysql/service-accounts/app-service-user)
VAULT_USERNAME=$(echo $VAULT_CREDS | jq -r '.data.data.username')
VAULT_PASSWORD=$(echo $VAULT_CREDS | jq -r '.data.data.password')

if docker exec vault-mysql-demo mysql -u $VAULT_USERNAME -p$VAULT_PASSWORD demo -e "
SELECT 
    'Rotation successful!' as Status,
    USER() as Connected_As,
    NOW() as Connection_Time,
    (SELECT COUNT(*) FROM users) as Total_Users,
    (SELECT COUNT(*) FROM orders) as Total_Orders;" 2>/dev/null; then
    echo "   ‚úÖ Application can successfully connect using rotated credentials from Vault"
else
    echo "   ‚ùå Connection failed with rotated credentials"
fi
echo

# Show version history
echo "üìö Credential Version History:"
echo "============================="
vault kv metadata get static-secrets/mysql/service-accounts/app-service-user | grep -A 15 "Versions:"
echo

# Compare with what's coming in Part 2
echo "üîÑ Static vs Dynamic Comparison:"
echo "================================"
echo
echo "‚ùå What we just saw (Static Rotation):"
echo "   ‚Ä¢ Manual password rotation required"
echo "   ‚Ä¢ Long-lived credentials exist in MySQL"
echo "   ‚Ä¢ Target system must be updated manually"
echo "   ‚Ä¢ Applications use same credential for extended periods"
echo "   ‚Ä¢ Still significant security improvement over never rotating"
echo
echo "‚úÖ What's coming in Part 2 (Dynamic Secrets):"
echo "   ‚Ä¢ Automatic credential generation on-demand"
echo "   ‚Ä¢ Short-lived credentials (minutes/hours)"
echo "   ‚Ä¢ No manual updates to target system"
echo "   ‚Ä¢ Each application request gets unique credentials"
echo "   ‚Ä¢ Ultimate security: credentials expire automatically"
echo

echo "‚úÖ Part 1 Demo Complete!"
echo
echo "üéØ Key Takeaways for Static Rotation:"
echo "   ‚Ä¢ Vault can generate passwords instead of humans"
echo "   ‚Ä¢ Password policies ensure consistent complexity"
echo "   ‚Ä¢ Manual coordination required between systems"
echo "   ‚Ä¢ Significant security improvement over static passwords"
echo "   ‚Ä¢ Version history enables rollback capabilities"
echo "   ‚Ä¢ Good for legacy systems that can't use dynamic secrets"
echo
echo "üí° Next: Part 2 will show dynamic secrets with the same MySQL database"